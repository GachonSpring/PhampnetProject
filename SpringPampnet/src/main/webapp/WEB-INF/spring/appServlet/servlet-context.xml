<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd    
    http://mybatis.org/schema/mybatis-spring 
    http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
    
      <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->    
    <!-- 스프링의 DispatcherServet에게 정적인 자원을 알려준다.  -->
    <mvc:resources location="/resources/"  mapping="/resources/**" />  
    <mvc:resources location="/images/" mapping="/images/**" />
    <mvc:resources location="/css/" mapping="/css/**" />
    <mvc:resources location="/js/" mapping="/js/**" />
    <mvc:resources location="/modules/" mapping="/modules/**" />

    <!-- HandlerMapping : BeanNameUrlHandlerMapping이 적용된다. -->
    <!-- The bean SimpleMappingExceptionResolver maps an exception type with a JSP view. 
         In this case, we map all exceptions of type java.lang.Exception to Error.jsp page.  
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView" value="error" />
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">Error</prop>
            </props>
        </property>
    </bean>  
    --> 
    

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">    
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
        <property name="contentType" value="text/html; charset=UTF-8" />
    </bean>

    <!-- Spring to use this multipartResolver for handling multipart request, -->
    <!-- with implementation is CommonsMultipartResolver which is using Apache Commons File Upload.  -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
         <property name="maxUploadSize"   value="20971520" /> <!-- max upload size in bytes  : 20MB -->
         <property name="maxInMemorySize" value="1048576"  /> <!-- max size of file in memory in bytes : 1MB  -->
    </bean> 
    
    
    
    <!-- Enables the Spring MVC @Controller programming model -->
    <!-- Controller에서 스프링 어노테이션 사용할 수 있도록 하는 설정 -->
    <!-- @RequestMapping , @ExceptionHandler 등과 같은 어노테이션을 사용하는 경우 설정해야 함  -->    
    <mvc:annotation-driven />    
    
    
    <!-- @Controller 어노테이션이 지정된 클래스를 컨테이너에 자동으로 동록 되게 하는 설정 -->
    <!-- 복수의 패키지를 사용하고 싶은 경우 <context:component-scan> 태그를 복수개 작성  -->    
    <context:component-scan base-package="com.lecture.spring.controller" />
  
</beans>
