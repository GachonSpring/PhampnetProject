/*
 * Reference Site 
 * 
 * http://netframework.tistory.com/entry/gradle%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-Spring-MVC-Web-Application-Spring-Data-JPA-QueryDSL
 * http://huskdoll.tistory.com/8
 * http://hangaebal.blogspot.kr/2014/06/spring-eclipse-gradle.html
 *
 * https://github.com/bmuschko/gradle-tomcat-plugin
 * https://github.com/bmuschko/gradle-cargo-plugin
 *
 * http://stackoverflow.com/questions/4384809/cause-no-such-property-sourcesets-for-class-org-gradle-api-plugins-convention
 */

// tomcat과 cargo plugin에 대한 repository 설정입니다.
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:1.4'
    }
}
 
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'  // WTP(Web Tools Platform) -> 웹 프로젝트로 인식하도록
apply plugin: 'groovy'
apply plugin: 'tomcat'
apply plugin: 'cargo'

group = 'com.lecture.spring'
version = '1.0.0'
description = 'SpringBoard'

// JAVA Version 1.8
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// 소스 인코딩 UTF-8로 지정
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
    
    //exclude 'log4j.properties'
}

// 메이븐 Central 저장소 사용
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven { url 'http://repo.spring.io/libs-release' }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    mavenCentral()
}

// dependency 버전 정보
ext {
    versions = [
          spring:'4.1.7.RELEASE'
        , security:'3.2.8.RELEASE'
        , junit: '4.11'
        , servletApi: '3.1.0'
        , jstl: '1.2'
        , slf4j: '1.7.9'
        , logback: '1.0.13'
        , mockito: '1.9.0'
        , cglib: '2.2.2'
        , groovy: '2.2.1'
        , jackson: '2.3.1'
        , aspectj: '1.8.6'
        , springSpock: '0.7-groovy-2.0'
        , tiles: '3.0.5'
        , hibernate: '4.2.20.Final'
        , tomcatVersion: '7.0.62'
        , cargoVersion: '1.4.5'
    ]
}

eclipse {
    wtp {
        facet {
            facet name: 'jst.web', version: '2.5' // Servlet Spec Version 지정, 미 지정시 2.4
            facet name: 'jst.java', version: '1.8' // Java Version 지정
        }
    }
    
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

configurations {
    providedRuntime
    providedCompile

    // logback(slf4j)를 사용하기 때문에 모든 의존성에서 commons-logging는 제외
    compile.exclude group: 'commons-logging', module: 'commons-logging'
}


// In this section you declare the dependencies for your production and test code
// 의존성 설정
dependencies {

    compile fileTree(dir: 'lib', include: ['*.jar'])
 
    // spring 관련 라이브러리 추가
    compile "org.springframework:spring-beans:$versions.spring"  
    compile "org.springframework:spring-context:$versions.spring"
    compile "org.springframework:spring-context-support:$versions.spring"
    compile "org.springframework:spring-webmvc:$versions.spring"
    compile "org.springframework:spring-orm:$versions.spring"
    compile "org.springframework:spring-core:$versions.spring"
    compile "org.springframework:spring-expression:$versions.spring"
    compile "org.springframework:spring-aop:$versions.spring"
    compile "org.springframework:spring-jdbc:$versions.spring"
    compile "org.springframework:spring-tx:$versions.spring"
    compile "org.springframework:spring-websocket:$versions.spring"
    compile "org.springframework:spring-messaging:$versions.spring"
    runtime "org.springframework:spring-aspects:$versions.spring"
    
    compile "org.springframework.security:spring-security-core:$versions.security"
    compile "org.springframework.security:spring-security-web:$versions.security"
    compile "org.springframework.security:spring-security-config:$versions.security"
    
    compile "org.springframework.webflow:spring-js:2.4.1.RELEASE"
    compile "org.springframework.webflow:spring-webflow:2.4.1.RELEASE"
    
    compile "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"

    compile "org.apache.tiles:tiles-api:$versions.tiles"
    compile "org.apache.tiles:tiles-core:$versions.tiles"
    compile "org.apache.tiles:tiles-jsp:$versions.tiles"
    
    
    // Apache Commons Lang, a package of Java utility classes for the classes that are in java.lang hierarchy, 
    // or are considered to be so standard as to justify existence in java.lang.
    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.apache.commons:commons-dbcp2:2.0"
    
   
   
    compile "commons-fileupload:commons-fileupload:1.2.1"
    compile "commons-io:commons-io:2.4"
    compile "commons-pool:commons-pool:1.6"  
    compile "commons-beanutils:commons-beanutils:1.9.2"
    
    //
    compile "org.aspectj:aspectjrt:$versions.aspectj"
    compile "org.aspectj:aspectjweaver:$versions.aspectj"
    compile "org.aspectj:aspectjtools:$versions.aspectj"
    
       
    // JSR 330 JAR 를 포함하기 위한 라이브러리. @Inject, @Named 어노테이션 사용 가능
    compile "javax.inject:javax.inject:1"
       
    // JSP Standard Tag Library 사용을 위한 라이브러리.
    compile "jstl:jstl:$versions.jstl"
    compile "javax.servlet.jsp.jstl:jstl-api:$versions.jstl"
    compile "taglibs:standard:1.1.2"
    
    
    //
    compile "cglib:cglib-nodep:$versions.cglib"


    //
    compile "ch.qos.logback:logback-classic:$versions.logback"
            
    
    // log library
    compile "org.slf4j:slf4j-api:$versions.slf4j"
    runtime "org.slf4j:slf4j-log4j12:$versions.slf4j"
    runtime "org.slf4j:jcl-over-slf4j:$versions.slf4j"
    runtime "log4j:log4j:1.2.17"    
         
                
    // log4jdbc library
    compile "com.googlecode.log4jdbc:log4jdbc:1.2"
    
    
    // mysql connector
    compile "mysql:mysql-connector-java:5.1.34"    
    
    
    // mybatis library
    compile "org.mybatis:mybatis-spring:1.2.2"
    compile "org.mybatis:mybatis:3.2.8"   
    
    //
    //compile "javax.persistence:persistence-api:1.0.2"


    // hibernate library
    compile "org.hibernate:hibernate-core:$versions.hibernate"
    compile "org.hibernate:hibernate-entitymanager:$versions.hibernate"
    compile "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"
    
    // @ResponseBody를 이용해 json 데이터를 반환하기 위한 라이브러리
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
    
    //
    testCompile "junit:junit:$versions.junit"
    testCompile "org.springframework:spring-test:$versions.spring"
    testCompile "org.mockito:mockito-core:$versions.mockito"   

    
    // tomcat plugin 설정입니다.
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:$versions.tomcatVersion"
    tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:$versions.tomcatVersion"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$versions.tomcatVersion") {
        exclude group: "org.eclipse.jdt.core.compiler", module: "ecj"
    }
    
    providedCompile "javax.servlet:javax.servlet-api:$versions.servletApi"    
    providedCompile "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1"  
    providedCompile "org.apache.tomcat:tomcat-servlet-api:$versions.tomcatVersion" 
    
    
    // cargo에 대한 설정입니다.
    cargo "org.codehaus.cargo:cargo-core-uberjar:$versions.cargoVersion"
    cargo "org.codehaus.cargo:cargo-ant:$versions.cargoVersion"       
}


sourceSets {
    main {
        java.srcDirs      = ['src/main/java'     ]      
        resources.srcDirs = ['src/main/resources']
    }
}


// TEST 설정
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    // testReport = false
    
    systemProperties 'property': 'value'
    
    testLogging {
        events 'started', 'passed'
    }
}
 

task copyTask(type: Copy) {
    
    /*
    copy {
	    println 'Copy from ${libsDir} into  D:\\Documents\\JAVA\\tomcat\\x64\\lib'
	    
	    from    '${libsDir}'
	    into    'D:\\Documents\\JAVA\\tomcat\\x64\\lib'
	    include '*.jar'
	}
    
    copy {
        def dest = "${projectDir}\\..\\kr.co.companymake.website\\src\\main\\webapp\\WEB-INF\\classes"
        println "Copy from " + sourceSets.main.resources.srcDirs  + " into " + dest
        
        from     sourceSets.main.resources.srcDirs  
        into     dest  
        include  "Configuration.xml"
    }
    */
}

war {
    baseName = 'spring'
    version = ''
    
	/*
	    from 'src/rootContent' // adds a file-set to the root of the archive
	    webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
	    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
	    classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
	    webXml = file('src/web.xml') // copies a file to WEB-INF/web.xml
	*/
}

task deployToTomcat(dependsOn: 'war') << {
    copy {
        
        from war.archivePath
        into "/Users/jinsoohan/software/apache-tomcat/webapps"
    }
}

tomcatStop() {    
    stopPort = 8005
    stopKey = 'stopKey'
}

// tomcatRun을 실행시키기 위해서 war에 대한 dependency를 주입합니다.
tomcatRun {    
    httpPort = 8100
    httpsPort = 8093
    
    stopPort = 8005
    stopKey = 'stopKey'
    
    enableSSL = true
    URIEncoding = 'utf-8'
    contextPath = ''
    configFile = file('src/main/resources/META-INF/context.xml') // 기본값 src/main/webapp/META-INF/context.xml
    
    dependsOn war
}


tomcatRunWar {
    dependsOn war
}


// cargo를 이용한 배포를 위해서 war에 대한 dependency를 주입합니다.
cargoRedeployRemote {
    dependsOn war
}


cargoDeployRemote {
    dependsOn war
}

cargo {
    containerId = 'tomcat7x'
    port = 8080

    deployable {
        context = '${project.name}'
    }

    // remoteDeploy 되는 target의 tomcat 정보
    remote {
        hostname = '192.168.13.209'
        username = 'ykyoon'
        password = 'qwer12#$'
    }
}